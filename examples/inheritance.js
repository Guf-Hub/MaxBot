/**
 * –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é MaxBot.createBot()
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 * –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç Bot –∫–ª–∞—Å—Å–∞ (—á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤ Apps Script –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö)
 */

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ (–±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç Bot)
class MyCustomBot {
  constructor(accessToken) {
    this.accessToken = accessToken;
    this.userStates = new Map(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.userData = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.commands = new Map(); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    this.setupCommands();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
  setupCommands() {
    this.commands.set("/start", this.handleStart.bind(this));
    this.commands.set("/help", this.handleHelp.bind(this));
    this.commands.set("/register", this.handleRegister.bind(this));
    this.commands.set("/profile", this.handleProfile.bind(this));
    this.commands.set("/stats", this.handleStats.bind(this));
    this.commands.set("/cancel", this.handleCancel.bind(this));
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  onMessage(message) {
    const chatId = message.recipient.data.chat_id;
    const text = message.body.text;
    const userId = message.sender.data.user_id;

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${text}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = this.userStates.get(userId) || "main";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith("/")) {
      const command = this.commands.get(text);
      if (command) {
        command(chatId, userId, message);
        return;
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    switch (userState) {
      case "waiting_name":
        this.handleNameInput(chatId, text, userId);
        break;
      case "waiting_age":
        this.handleAgeInput(chatId, text, userId);
        break;
      case "waiting_email":
        this.handleEmailInput(chatId, text, userId);
        break;
      default:
        this.handleMainMenu(chatId, text, userId);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  onCallback(callback) {
    const chatId = callback.chat_id;
    const payload = callback.payload;
    const userId = callback.sender.data.user_id;

    console.log(`–ü–æ–ª—É—á–µ–Ω callback –æ—Ç ${userId}: ${payload}`);

    switch (payload) {
      case "register":
        this.handleRegister(chatId, userId);
        break;
      case "help":
        this.handleHelp(chatId, userId);
        break;
      case "profile":
        this.handleProfile(chatId, userId);
        break;
      case "stats":
        this.handleStats(chatId, userId);
        break;
      case "cancel":
        this.handleCancel(chatId, userId);
        break;
      default:
        this.sendMessage({
          text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${payload}`,
          chatId: chatId,
        });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  handleStart(chatId, userId) {
    this.userStates.set(userId, "main");
    this.sendWelcomeMessage(chatId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  handleHelp(chatId, userId) {
    this.showHelp(chatId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /register
  handleRegister(chatId, userId) {
    this.startRegistration(chatId, userId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
  handleProfile(chatId, userId) {
    this.showProfile(chatId, userId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
  handleStats(chatId, userId) {
    const stats = this.getStats();
    this.sendMessage({
      text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\nüîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${stats.activeStates}`,
      chatId: chatId,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
  handleCancel(chatId, userId) {
    this.userStates.set(userId, "main");
    this.sendMessage({
      text: "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
      chatId: chatId,
    });
    this.sendWelcomeMessage(chatId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  handleMainMenu(chatId, text, userId) {
    this.sendMessage({
      text: `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:`,
      chatId: chatId,
    });
    this.sendMainKeyboard(chatId);
  }

  // –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  startRegistration(chatId, userId) {
    this.userStates.set(userId, "waiting_name");

    const keyboard = this.keyboard.callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel").build();

    this.sendMessage({
      text: "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
      chatId: chatId,
      keyboard: keyboard,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  handleNameInput(chatId, text, userId) {
    if (text === "‚ùå –û—Ç–º–µ–Ω–∞" || text === "/cancel") {
      this.handleCancel(chatId, userId);
      return;
    }

    if (text.length < 2) {
      this.sendMessage({
        text: "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
        chatId: chatId,
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
    this.userData[userId] = { name: text };
    this.userStates.set(userId, "waiting_age");

    this.sendMessage({
      text: "üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (1-120):",
      chatId: chatId,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
  handleAgeInput(chatId, text, userId) {
    if (text === "‚ùå –û—Ç–º–µ–Ω–∞" || text === "/cancel") {
      this.handleCancel(chatId, userId);
      return;
    }

    const age = parseInt(text);

    if (isNaN(age) || age < 1 || age > 120) {
      this.sendMessage({
        text: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120):",
        chatId: chatId,
      });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ email
    this.userData[userId].age = age;
    this.userStates.set(userId, "waiting_email");

    this.sendMessage({
      text: "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
      chatId: chatId,
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
  handleEmailInput(chatId, text, userId) {
    if (text === "‚ùå –û—Ç–º–µ–Ω–∞" || text === "/cancel") {
      this.handleCancel(chatId, userId);
      return;
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(text)) {
      this.sendMessage({
        text: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:",
        chatId: chatId,
      });
      return;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    this.userData[userId].email = text;
    this.userStates.set(userId, "main");

    this.sendMessage({
      text: `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\nüë§ –ò–º—è: ${this.userData[userId].name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${this.userData[userId].age}\nüìß Email: ${this.userData[userId].email}`,
      chatId: chatId,
    });

    this.sendMainKeyboard(chatId);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  showProfile(chatId, userId) {
    const userData = this.userData[userId];

    if (!userData) {
      this.sendMessage({
        text: "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
        chatId: chatId,
      });
      this.sendMainKeyboard(chatId);
      return;
    }

    this.sendMessage({
      text: `üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§ –ò–º—è: ${userData.name}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: ${
        userData.age
      }\nüìß Email: ${userData.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}`,
      chatId: chatId,
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  showHelp(chatId) {
    const helpText = `
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    `;

    this.sendMessage({
      text: helpText,
      chatId: chatId,
    });

    this.sendMainKeyboard(chatId);
  }

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  sendWelcomeMessage(chatId) {
    const welcomeText = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MaxBot!

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;

    this.sendMessage({
      text: welcomeText,
      chatId: chatId,
    });

    this.sendMainKeyboard(chatId);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  sendMainKeyboard(chatId) {
    const keyboard = this.keyboard
      .callback("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "register")
      .callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "profile")
      .callback("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
      .callback("‚ùì –ü–æ–º–æ—â—å", "help")
      .build();

    this.sendMessage({
      text: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      chatId: chatId,
      keyboard: keyboard,
    });
  }

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      totalUsers: Object.keys(this.userData).length,
      activeStates: this.userStates.size,
      registeredUsers: Object.keys(this.userData).filter(
        (id) => this.userData[id].email
      ).length,
    };
  }

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  clearUserData(userId) {
    delete this.userData[userId];
    this.userStates.delete(userId);
  }

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserData(userId) {
    return this.userData[userId] || null;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞
const bot = MaxBot.createBot("YOUR_ACCESS_TOKEN", MyCustomBot);

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
function testCustomMethods() {
  const stats = bot.getStats();
  console.log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:", stats);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userData = bot.getUserData("some_user_id");
  console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userData);
}

// –§—É–Ω–∫—Ü–∏—è doPost –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    bot.handleWebhook(data);
    return ContentService.createTextOutput(
      JSON.stringify({
        status: "success",
        message: "Webhook processed",
      })
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:", error);
    return ContentService.createTextOutput(
      JSON.stringify({
        status: "error",
        message: "Webhook processing failed",
        error: error.message,
      })
    );
  }
}

// –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
function setupWebhook() {
  const webhookUrl = "https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec";
  bot.setWebhook(webhookUrl);

  const webhooks = bot.getWebhooks();
  console.log("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏:", webhooks);
}
